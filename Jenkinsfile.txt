pipeline {
    agent any
    stages {
        stage('GitHub Webhook Trigger') {
            steps {
                script {
                    // Check if the webhookPayload variable is available
                    if (env.webhookPayload) {
                        echo "GitHub Webhook Payload: ${env.webhookPayload}"
                        
                        // Parse the JSON payload
                        def payload = readJSON text: env.webhookPayload
                        
                        // Access specific information from the payload
                        def repositoryName = payload.repository.name
                        def branchName = payload.ref.split('/').last()

                        echo "Repository Name: ${repositoryName}"
                        echo "Branch Name: ${branchName}"

                        // Your custom logic based on GitHub webhook data
                        // For example, trigger specific actions based on branch or event type
                    } else {
                        echo "No GitHub webhook payload found. This build might not be triggered by a webhook."
                    }
                }
            }
        }

        stage('Checkout and Upload to AWS') {
            steps {
                script {
                    // Checkout the code from the Git repository
                    git url: 'https://github.com/socialboomer2023/gluejobs.git', branch: 'main'
                    
                    // Use 'bat' to execute a Windows command to find .py files
                    def filesToUpload = bat(script: 'dir /s /b *.py', returnStatus: true).trim()

                    // Check if the command executed successfully
                    if (filesToUpload == 0) {
                        // Use 'bat' to execute a Windows command to find .py files and store the output in a variable
                        def filesList = bat(script: 'dir /s /b *.py', returnStdout: true).trim()

                        // Check if the files list is not empty
                        if (filesList) {
                            // Print debugging information
                            echo "Files to upload:"
                            filesList.readLines().each { file ->
                                echo "- ${file}"

                                // Use withAWS and s3Upload for each file
                                withAWS(credentials: 'AWS_CREDENTIAL_ID', region: 'us-east-1') {
                                    echo "Uploading: ${file}"

                                    s3Upload(
                                        bucket: 'cicdglue',
                                        includePathPattern: file,
                                        workingDir: ''
                                    )
                                }
                            }
                        } else {
                            error "No .py files found in the workspace."
                        }
                    } else {
                        error "Error while executing the 'dir' command."
                    }
                }
            }
        }
    }
}