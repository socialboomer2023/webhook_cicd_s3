pipeline {
    agent any

    stages {
        stage('GitHub Webhook Trigger') {
            steps {
                script {
                    // Check if the webhookPayload variable is available
                    if (env.webhookPayload) {
                        echo "GitHub Webhook Payload: ${env.webhookPayload}"
                        
                        // Parse the JSON payload
                        def payload = readJSON text: env.webhookPayload
                        
                        // Access specific information from the payload
                        def repositoryName = payload.repository.name
                        def branchName = payload.ref.split('/').last()

                        echo "Repository Name: ${repositoryName}"
                        echo "Branch Name: ${branchName}"

                        // Your custom logic based on GitHub webhook data
                        // For example, trigger specific actions based on branch or event type
                    } else {
                        echo "No GitHub webhook payload found. This build might not be triggered by a webhook."
                    }
                }
            }
        }

        stage("Upload to AWS") {
            steps {
                script {
                    // Use 'dir' command to locate all .py files
                    def filesList = bat(script: 'dir /s /b .\\*.py', returnStdout: true).trim()

                    // Check if the output is not null
                    if (filesList != null && filesList.trim() != '') {
                        // Split the output into a list of files
                        def filesToUpload = filesList.readLines()

                        // Print debugging information
                        echo "Files to upload:"
                        filesToUpload.each { file ->
                            echo "- $file"
                        }

                        // Use withAWS and s3Upload for each file
                        withAWS(credentials: 'AWS_CREDENTIAL_ID', region: 'us-east-1') {
                            filesToUpload.each { file ->
                                // Use '/' as a separator for file path
                                def relativePath = file.replace("\\", "/").replaceFirst('.+?/workspace/webhook_CICD_S3_upload/', '')

                                echo "Uploading: $relativePath"

                                s3Upload(
                                    bucket: 'cicdglue',
                                    includePathPattern: relativePath,
                                    workingDir: ''
                                )
                            }
                        }
                    } else {
                        error "No .py files found in the workspace."
                    }
                }
            }
        }
    }
}
